# A modified version of perly.y taken from perl's source
#   list of all required functions
#   print, printf, chomp, split, join, exit, push, pop, shift, scalar
#   unshift, reverse, open, close, sort BLOCK LIST, keys, return,
#   ^(\/[^/]*\/)|(s\/[^/]*\/[^/]*\/)
#   s\/((?:[^\/\\]|\\\/|\\\\)*)\/((?:[^\/\\]|\\\/|\\\\)*)\/([msixpodualngcer]?)

%{
use Term::ANSIColor;

sub Lexer {
    my ($type, $value) = getToken($_[0]);

    if ($_[0]->YYData->{"DEBUG"}){
        print STDERR color('red');
        print STDERR "Removed: (", color('reset'), "'$type': '$value'",
        color('red'), ")\n";
        print STDERR color('reset');
    }

    return ($type, $value);
}

sub getToken {
    my $uni = "chomp|exit|pop|shift|scalar|close|keys";
    my $lop = "printf|print|join|split|push|unshift|reverse|open|sort";
    my @tokens = (
        # matches a string with double or escaped quotes 
        #["STRING", qr/"(?:\\"|""|\\\\|[^"])*"/],
        ["STRING", qr/^"(?:[^"\\]|\\.|"")*"/],
        # matches until first ', avoiding \'
        ["STRING", qr/'.*?(?<!\\)'/],
        # matches matching functions split (/foo/, $bar)
        ["PMFUNC", qr/split(?=\s*\(\s*\/)/],
        ["RESUB", qr/s\/(?:(?<!\\)(?:\\\\)*.*\/){2}[msixpodualngcer]?/],
        ["REMATCH", qr/m?\/(?<!\\)(?:\\\\)*.*\/[imnsxadlup]?/],
        #matches all functions with brackets
        ["FUNC1", qr/(?:${uni})(?=\s*\()/],
        ["UNIOP", qr/(?:${uni})(?!\s*\()/],
        ["FUNC", qr/(?:${lop})(?=\s*\()/],
        ["LSTOP", qr/(?:${lop})(?!\s*\()/],
        ["FHANDLE", qr/<.*?>/],
        ["ARGV", qr/ARGV/],
        ["COMMENT", qr/\#.*/],
        ["FOR", qr/foreach|for/],
        ["WHILE", qr/while/],
        ["ELSIF", qr/elsif/],
        ["ELSE", qr/else/],
        ["LOOPEX", qr/(last|next)(?=\s*;)/],
        ["ANDOP", qr/and/],
        ["NOTOP", qr/not/],
        ["SUB", qr/sub/],
        ["IF", qr/if/],
        ["MY", qr/my/],
        ["OROP", qr/or/],
        ["DOTDOT", qr/\.\./],
        ["EQOP", qr/==|!=|eq|<=>/],
        ["ANDAND", qr/&&/],
        ["MATCHOP", qr/=~/],
        ["POWOP", qr/\*\*/],
        ["POSTINC", qr/\+\+/],
        ["POSTDEC", qr/--/],
        ["DOLSHARP", qr/\$#/],
        ["ASSIGNOP", qr/=|\.=/],
        ["ADDOP", qr/[\+\.-]/],
        ["BITANDOP", qr/&/],
        ["BITOROP", qr/\|/],
        ["BITXOROP", qr/\^/],
        ["SHIFTOP", qr/>>|<</],
        ["RELOP", qr/<=|>=|lt|gt|le|ge/],
        ["RELOP", qr/>|</],
        ["MULOP", qr/[\/%\*]/],
        ["OROR", qr/\|\|/],
        ["~", qr/~/],
        [",", qr/,/],
        ["!", qr/!/],
        [")", qr/\)/],
        ["(", qr/\(/],
        ["{", qr/\{/],
        ["}", qr/\}/],
        [";", qr/;/],
        ["[", qr/\[/],
        ["]", qr/\]/],
        ["@", qr/@/],
        ["%", qr/%/],
        ["\$", qr/\$/],
        ["WORD", qr/\w+/a], #look at later
    );

    $_[0]->YYData->{"DATA"} =~ s/^\s+//;
    $_[0]->YYData->{"DATA"} =~ s/(?!})^.*?\K;?\s*}/;}/;

    if ($_[0]->YYData->{"DEBUG"}){
        print STDERR color('blue');
        print STDERR "___Remaining___\n", $_[0]->YYData->{"DATA"};
        print STDERR color('reset');
    }

    my @length;
    my $found = 0;
    for (my $i; $i < scalar @tokens; $i++){
        my $token = $tokens[$i][0];
        my $re = $tokens[$i][1];
        $length[$i] = 0;
        if ($_[0]->YYData->{"DATA"} =~ /^${re}/){
            $found = 1;
            @length[$i] = length($&);
            #print "Found match ($token): ($&), $length[$i]\n";
        }
        #print "$token, $re\n";
    }

    if ($found){
        my $maxpos = 0; 
        my $maxval = 0;
        for (my $i = 0; $i < scalar @tokens; $i++){
            if ($length[$i] > $maxval){
                $maxpos = $i;
                $maxval = $length[$i];
            }
        }
        #print "$tokens[$maxpos][0]\n";
        my $token = $tokens[$maxpos][0];
        my $re = $tokens[$maxpos][1];
        $_[0]->YYData->{"DATA"} =~ s/^${re}//;
        #print "$token : $&\n";
        return ($token, $&);
    }
    elsif (!$found && !length($_[0]->YYData->{"DATA"})) {
        return ('', undef);
    }
    else {
        print STDERR "No Match Found\n";
        print STDERR $_[0]->YYData->{"DATA"}, "\n";
        return ('', undef);
    }
}

sub printer{
    my @tokens = @{shift(@_)};
    my @words = @_;
    my $parser = shift(@tokens);
    my $first_word = shift(@words);
    my $word_string = $first_word." => ";
    $word_string .= join(" -> ", @words);
    my $token_string = "$first_word"." => ";
    $token_string .= join(" -> ", @tokens);
    
    if ($parser->YYData->{"DEBUG"}){
        print STDERR color('green');
        print STDERR "$word_string\n";
        print STDERR "$token_string\n";
        print STDERR "\n";
        #print STDERR "('", $parser->YYCurtok, "': '", $parser->YYCurval, "')\n";
        #print STDERR "YYExpect:\n", join("\n", $parser->YYExpect), "\n";
        print STDERR color('reset');
    }
}
%}

%token '{'

%token WORD PMFUNC STRING /*METHOD FUNCMETH THING PRIVATEREF*/
/*%token FUNC0SUB UNIOPSUB LSTOPSUB*/
/*%token LABEL*/
%token /*FORMAT ANONSUB PACKAGE USE*/ SUB 
%token WHILE IF /*UNTIL UNLESS*/ ELSE ELSIF FOR
%token LOOPEX DOTDOT
%token FUNC1 FUNC UNIOP LSTOP /*FUNC0*/
%token RELOP EQOP MULOP ADDOP BITANDOP BITOROP SHIFTOP BITXOROP
%token DOLSHARP /*DO HASHBRACK*/ NOAMP
%token MY /*LOCAL MYSUB*/
%token REMATCH RESUB 
%token FHANDLE ARGV 
/*%token COLONATTR*/

%nonassoc PREC_LOW
%nonassoc LOOPEX

%left OROP
%left ANDOP
%right NOTOP
%nonassoc LSTOP /*LSTOPSUB*/
%left ','
%right ASSIGNOP
/*%right '?' ':'*/
%nonassoc DOTDOT
%left OROR
%left ANDAND
%left BITOROP BITXOROP
%left BITANDOP
%nonassoc EQOP
%nonassoc RELOP
%nonassoc UNIOP /*UNIOPSUB*/
%left SHIFTOP 
%left ADDOP
%left MULOP
%left MATCHOP
%right '!' '~' UMINUS /*REFGEN*/
%right POWOP
%nonassoc /*PREINC PREDEC*/ POSTINC POSTDEC
/*%left ARROW*/
%nonassoc ')'
%left '('
%left '[' '{'


%% /* RULES */

/* The whole program */
prog    :    lineseq
            {
                printer(\@_, "prog", "lineseq");
                return "$_[1]";
            }
    ;

/* An ordinary block */
block    :    '{' remember lineseq '}'
            {
                printer(\@_, qw( block { lineseq } )); 
                #adds indentation
                $_[3] =~ s/^/    /gm;   #"/
                return "\n$_[3]\n";
            }
    ;

remember:    /* NULL */    /* start a full lexical scope */
    ;

mblock    :    '{' mremember lineseq '}'
            {
                printer(\@_, qw( mblock { lineseq } )); 
                #adds indentation
                $_[3] =~ s/^/    /gm;    #"/
                return "\n$_[3]\n";
            }
    ;

mremember:    /* NULL */    /* start a partial lexical scope */
    ;

/*
indexblock    :    '{' sideff '}'
            {
                printer(\@_, qw( indexblock { sideff } )); 
                return "[$_[3]]";
            }
    ;
    */

/* A collection of "lines" in the program */
lineseq    :    /* NULL */
    |    lineseq decl
            {
                printer(\@_, qw( lineseq lineseq decl )); 
                return "$_[1]$_[2]";
            }
    |    lineseq line
            {
                printer(\@_, "lineseq", "lineseq", "line");
                return "$_[1]$_[2]";
            }
    ;

/* A "line" in the program */
line    :     cond
            {
                printer(\@_, qw( line cond )); 
                return $_[1];
            }

    |    loop    /* loops add their own labels */
            {
                printer(\@_, qw( line loop )); 
                return $_[1];
            }
    
    |     sideff ';'
            {
                printer(\@_, "line", "sideff", "';'");
                return "$_[1]\n";
            }
    |    COMMENT
            {
                printer(\@_, "line", "COMMENT");
                return "$_[1]\n";
            }
    ;

/* An expression which may have a side-effect */
sideff    : expr

            {
                printer(\@_, "sideff", "expr");
                return $_[1];
            }
    |    expr WHILE expr
            {
                printer(\@_, qw( sideff expr WHILE expr ));
                return "while $_[3]: $_[1]";
            }
    |    expr FOR expr
            {
                printer (\@_, qw(sideff expr FOR expr));
                return "for $_[3]: $_[1]";
            }
    ;

/* else and elsif blocks */
else    :    /* NULL */
    |    ELSE mblock
            {
                printer (\@_, qw( else ELSE mblock ));
                return "else:$_[2]";
            }
    |    ELSIF '(' mexpr ')' mblock else
            {
                printer (\@_, qw( else ELSIF '(' mexpr ')' mblock else)); 
                return "elif $_[3]:$_[5]$_[6]";
            }
    ;

/* Real conditional expressions */
cond    :    IF '(' remember mexpr ')' mblock else
            {
                printer (\@_, qw( IF '(' remember mexpr ')' mblock else));
                return "if $_[4]:$_[6]$_[7]";
                
            }
    ;

/* Loops: while, until, for, and a bare block */
loop    :     WHILE '(' remember mtexpr ')' mblock /*cont*/
            {
                 printer (\@_, qw(WHILE '(' remember mtexpr ')' mblock cont)); 
                 if ($_[4] =~ /(\w+)\s*=\s*(.*)\s*/){
                    return "for $1 in $2:$_[6]$_[7]";
                 }
                 else{
                    return "while $_[4]:$_[6]$_[7]";
                 }
            }
    |     FOR MY remember my_scalar '(' mexpr ')' mblock /*cont*/
            {
                printer (\@_, qw(loop FOR MY remember my_scalar '(' mexpr ')' mblock cont)); 
                return "for $_[4] in $_[6]:$_[8]";
            }
    |     FOR scalar '(' remember mexpr ')' mblock /*cont*/
            {
                printer (\@_, qw(loop FOR scalar '(' mexpr ')' mblock cont)); 
                return "for $_[2] in $_[5]:$_[7]";
            }
    |     FOR '(' remember mexpr ')' mblock /*cont*/
            {
                return "for _ in $_[4]:$_[6]";
            }
    |     FOR '(' remember mnexpr ';' mtexpr ';' mnexpr ')' mblock
            {
                printer (\@_, qw(loop FOR '(' remember mnexpr ';' mtexpr ';' mnexpr ')' mblock)); 
                return "$_[4]\nwhile $_[6]:$_[10]$_[8]\n";
            }
    ;

/* Normal expression */
nexpr    :    /* NULL */
            {}
    |    sideff
    ;

/* Boolean expression */
texpr    :    /* NULL means true */
            {}
    |    expr
    ;

/* Expression with its own lexical scope */
mexpr    :    expr
            {
                printer (\@_, qw(mexpr expr) ); 
                return $_[1];
            }
    ;

mnexpr    :    nexpr
    ;

mtexpr    :    texpr
    ;

/* Some kind of declaration - does not take part in the parse tree */
decl    :   subrout
            {}
    ;

/* Subroutine definition */
subrout    :    SUB startsub subname /*proto subattrlist*/ subbody
            {
            }
    ;

startsub:    /* NULL */    /* start a regular subroutine scope */
            {}
;

/* Name of a subroutine - must be a bareword, could be special */
subname    :    WORD    {}
    ;

/* Subroutine body - either null or a block */
subbody    :    block    {}
    |    ';'    {}
    ;


/* Ordinary expressions; logical combinations */
expr    :    expr ANDOP expr
            {
                printer (\@_, qw(expr expr ANDOP expr)); 
                return "$_[1] and $_[3]";
            }
    |    expr OROP expr
            {
                printer (\@_, qw(expr expr OROP expr)); 
                return "$_[1] or $_[3]";
            }
    |    argexpr %prec PREC_LOW
            {
                printer(\@_, qw(expr argexpr));
                return $_[1];
            }
    ;

/* Expressions are a list of terms joined by commas */
argexpr    :    argexpr ','
            {
                printer (\@_, "argexpr", "','");
                return "$_[1], ";
            }
    |    argexpr ',' term
            {
                printer (\@_, "argexpr", "','", "term");
                return "$_[1], $_[3]";
            }
    |    term %prec PREC_LOW
            {
                printer (\@_, "argexpr", "term");
                return $_[1];
            }
    ;



/* Some kind of subscripted expression */
subscripted: scalar '[' expr ']'          /* $array[$element] */
            {
                return "$_[1]$_[2]$_[3]$_[4]"; 
            }
    | subscripted '[' expr ']'          /* $array[$element] */
            {
                return "$_[1]$_[2]$_[3]$_[4]"; 
            }
    | scalar '{' expr ';' '}'
            {
                $_[0]->YYData->{"PRELUDE"}{"$_[1] = {}"} = 1; 
                return "$_[1]\[$_[3]\]"; 
            }
    | subscripted '{' expr ';' '}'
            {
                return "$_[1]\[$_[3]\]"; 
            }
    ;

/* Binary operators between terms */
termbinop    :    term ASSIGNOP term             /* $x =, .= $y */
            {
                printer (\@_, "termbinop", "term", "ASSIGNOP", "term");
                if ($_[2] eq '.=') {$_[2] = '+='}
                return "$_[1] $_[2] $_[3]";
            }
    |    term POWOP term                        /* $x ** $y */
            {
                printer (\@_, "termbinop", "term", "POWOP", "term");
                return "eval(str($_[1])) $_[2] eval(str($_[3]))";
            }
    |    term MULOP term                        /* $x * $y*/
            {
                printer (\@_, "termbinop", "term", "MULOP", "term");
                return "eval(str($_[1])) $_[2] eval(str($_[3]))";
            }
    |    term ADDOP term                        /* $x [+-.] $y */
            {
                printer (\@_, "termbinop", "term", "ADDOP", "term");
                if ($_[2] eq '.'){
                    return "$_[1] + $_[3]";
                }
                else{
                    return "eval(str($_[1])) $_[2] eval(str($_[3]))";
                }
            }
    |   term SHIFTOP term                      /* $x >> $y, $x << $y */
            {
                printer (\@_, qw(term SHIFTOP term)); 
                return "$_[1] $_[2] $_[3]";
            }
    |    term RELOP term                        /* $x > $y, etc. */
            {
                printer (\@_, qw(termbinop term EQOP term)); 
                my %relop = (
                    "gt" => ">",
                    "ge" => ">=",
                    "le" => "<=",
                    "lt" => "<"
                );
                $_[2] = exists $relop{$_[2]} ? $relop{$_[2]} : $_[2];
                return "$_[1] $_[2] $_[3]";
            }
    |    term EQOP term                         /* $x == $y, $x eq $y */
            {
                printer (\@_, qw(termbinop term EQOP term)); 
                if ($_[2] eq 'eq') {$_[2] = '=='}
                if ($_[2] eq '<=>') {
                    return "((a > b) - (a < b))";
                }
                return "$_[1] $_[2] $_[3]";
            }
    |   term BITANDOP term                     /* $x & $y */
            {
                printer (\@_, qw(termbinop term BITANDOP term)); 
                return "$_[1] & $_[2]";
            }
    |   term BITOROP term                      /* $x | $y */
            {
                printer (\@_, qw(termbinop term BITOROP term)); 
                return "$_[1] | $_[2]";
            }
    |   term BITXOROP term                      /* $x | $y */
            {
                printer (\@_, qw(termbinop term BITXOROP term)); 
                return "$_[1] ^ $_[2]";
            }
    |    term DOTDOT term                       /* $x..$y, $x...$y */
            {
                return "list(range($_[1], $_[3] + 1))";
            }
    |    term ANDAND term                       /* $x && $y */
            {
                printer (\@_, qw(termbinop term ANDAND term)); 
                return "$_[1] and $_[3]";
            }
    |    term OROR term                         /* $x || $y */
            {
                printer (\@_, qw(termbinop term OROR term)); 
                return "$_[1] or $_[3]";
            }
    |    term MATCHOP term         /*or term?           /* $x =~ s/$y/ */
            {
                $_[0]->YYData->{"IMPORTS"}{"import re"} = 1; 
                if ($_[3] =~ /^s/){
                    $_[3] =~ /s\/((?<!\\)(?:\\\\)*.*)\/((?<!\\)(?:\\\\)*.*?)\/([msixpodualngcer]?)/;
                    my $re = $1;
                    my $repl = $2;
                    my $flags = $3;

                    my @flags;
                    if ($flags =~ /i/){push(@flags, "re.I")}
                    if ($flags =~ /m/){push(@flags, "re.M")}
                    if ($flags =~ /s/){push(@flags, "re.S")}
                    $flags = join('| ', @flags);

                    $repl =~ s/(?<!\\)(?:\\\\)*\K\\(\d)/\\$1/;
                    if ($flags){
                        return "$_[1] = re.sub(r'$re', '$repl', $_[1], $flags)";
                    }
                    else{
                        return "$_[1] = re.sub(r'$re', '$repl', $_[1])";
                    }
                }
                else{
                    $_[3] =~ /\/((?<!\\)(?:\\\\)*.*)\/([imnsxadlup]?)/;
                    my $re = $1;
                    my $flags = $2;

                    my @flags;
                    if ($flags =~ /i/){push(@flags, "re.I")}
                    if ($flags =~ /m/){push(@flags, "re.M")}
                    if ($flags =~ /s/){push(@flags, "re.S")}
                    $flags = join('| ', @flags);

                    if ($flags){
                        return "__MATCH__ = re.search(r'$re', $_[1], $flags)";
                    }
                    else{
                        return "__MATCH__ = re.search(r'$re', $_[1])";
                    }
                    
                }
            }
    ;

/* Unary operators and terms */
termunop : '-' term %prec UMINUS                       /* -$x */
            {
                return "-$_[2]"; 
            }
    |    '+' term %prec UMINUS                  /* +$x */
            {
                return $_[2]; 
            }
    |    '!' term                               /* !$x */
            {
                printer (\@_, qw(termunop '!' term)); 
                return "not $_[2]";
            }
    |   '~' term                               /* ~$x */
            {
                printer (\@_, qw(termunop '~' term)); 
                return "~$_[2]";
            }
    |    term POSTINC                           /* $x++ */
            {
                printer (\@_, qw(termunop term POSTINC)); 
                return "$_[1] += 1";
            }
    |    term POSTDEC                           /* $x-- */
            {
                printer (\@_, qw(termunop term POSTDEC)); 
                return "$_[1] -= 1";
            }
    ;

term    :    termbinop
    |    termunop
    |    FHANDLE
            {
                if ($_[1] eq "<STDIN>"){
                    $_[0]->YYData->{"IMPORTS"}{"import sys"} = 1; 
                    return "sys.stdin.readline()";
                }
                elsif ($_[1] eq "<\@STDIN>"){
                    $_[0]->YYData->{"IMPORTS"}{"import sys"} = 1; 
                    return "sys.stdin.readlines()";

                }
                elsif ($_[1] eq "<>"){
                    $_[0]->YYData->{"IMPORTS"}{"import fileinput"} = 1; 
                    return "fileinput.input()";
                }
                else{
                    $_[1] =~ s/<(.*?)>/$1/;
                    return $_[1];
                }
                
            }
    |    REMATCH
    |    RESUB
    |    ARGV 
            {
                $_[0]->YYData->{"IMPORTS"}{"import sys"} = 1; 
                $_[0]->YYData->{"PRELUDE"}{"sys.argv = sys.argv[1:]"} = 1; 
                return "sys.argv";
            }
    |    STRING 
            {
                printer (\@_, "term", "STRING");
                $_[1] =~ s/^"\$(\w+)"/$1/;
                return $_[1];
            }

    |    myattrterm    %prec UNIOP
            {}
    |    '(' expr ')'
            {
                return $_[2];    
            }
    |    '(' ')'
            {}
    |    scalar    %prec '('
            {
                printer (\@_, "term", "scalar");
                return $_[1];
            }
    |    hsh     %prec '('
            {}
    |    ary     %prec '('
            {
                printer (\@_, qw(term ary)); 
                return $_[1];
            }
    |    arylen     %prec '('                    /* $#x, $#{ something } */
    |       subscripted
    |    ary '[' expr ']'                     /* array slice */
            {
                return "$_[1]$_[2]$_[3]$_[4]"; 
            }
    |    amper                                /* &foo; */
            {}
    |    amper '(' ')'                        /* &foo() */
            {}
    |    amper '(' expr ')'                   /* &foo(@args) */
            {}
    |    NOAMP WORD listexpr                  /* foo(@args) */
            {
                printer (\@_, qw(term NOAMP WORD listexpr)); 
            }
    |    LOOPEX  /* loop exiting command (goto, last, dump, etc) */
            {
                if ($_[1] eq "last"){
                    return "break";
                }
                elsif ($_[1] eq "next"){
                    return "continue";
                }

            }
    |    NOTOP argexpr                        /* not $foo */
            {
                printer (\@_, qw(term NOTOP argexpr)); 
                return "not $_[2]";
            }
    |    UNIOP                                /* Unary op, $_ implied */
            {
                printer (\@_, qw(term UNIOP)); 
                if ($_[1] eq "exit"){
                   return "exit()";
                }
            }
    |    UNIOP block                          /* eval { foo }, I *think* */
            {}
    |    UNIOP term                           /* Unary op */
            {
                printer (\@_, qw(term UNIOP term)); 
                if ($_[1] eq "chomp"){
                   return "$_[2] = $_[2].strip()";
                }
                elsif ($_[1] eq "pop"){
                    return "$_[2].pop()";
                }
                elsif ($_[1] eq "shift"){
                    return "$_[2].pop(0)";
                }
                elsif ($_[1] eq "close"){
                    return "$_[2].close()";
                }
                elsif ($_[1] eq "keys"){
                    return "$_[2].keys()";
                }
                
            }
    |    FUNC1 '(' ')'                        /* not () */
            {
                if ($_[1] eq "exit"){
                   return "exit()";
                }
            }
    |    FUNC1 '(' expr ')'                   /* not($foo) */
            {
                if ($_[1] eq "exit"){
                   return "exit($_[3])";
                }
                elsif ($_[1] eq "chomp"){
                   return "$_[3] = $_[3].strip()";
                }
                elsif ($_[1] eq "pop"){
                    return "$_[3].pop()";
                }
                elsif ($_[1] eq "shift"){
                    return "$_[3].pop(0)";
                }
                elsif ($_[1] eq "close"){
                    return "$_[3].close()";
                }
                elsif ($_[1] eq "keys"){
                    return "$_[3].keys()";
                }
            }
    |    PMFUNC '(' term ')'                  /* split (/foo/) */
            {}
    |    PMFUNC '(' term ',' term ')'         /* split (/foo/,$bar) */
            {
                $_[3] =~ s/\/(.*)\//$1/;
                #$_[3] =~ s/\\([\{\}\[\]\(\)\^\$\.\|\*\+\?\\])/$1/g;
                $_[3] =~ s/\\([\Q{}[]()^$.|*+?\\E])/$1/g;
                return "split($_[3], $_[5])";
            }
    |    WORD

    /* list operators */
    |    LSTOP indirob argexpr /* map {...} @args or print $fh @args */
            {
                #sort goes here
                printer (\@_, "term", "LSTOP", "indirob", "argexpr");
            }
    |    FUNC '(' indirob expr ')'      /* print ($fh @args */
            {
                
                printer (\@_, "term", "FUNC", "indirob", "argexpr");
                #sort goes here
            }
    |    LSTOP listexpr                       /* print @args */
            {
                printer (\@_, "term", "LSTOP", "listexpr");

                if ($_[1] eq "printf"){
                    my @list;
                    my ($string, @args) = split(/"(?:\\"|""|\\\\|[^"])*"\K,\s*/, $_[2]);

                    my $re = qr/(?<!\\)(?:\\\\)*\K\$\w+(?:\[(?<!\\)(?:\\\\)*\$\w+\])?/;

                    $string =~ s/(\$\w+){(.*?);?}/$1\[$2\]/g;
                    my @matches = $string =~ /${re}|%[csduoxefgXEGi]/g;
                    foreach my $match (@matches){
                        if ($match =~ /\$\w+/){
                            $string =~ s/${re}/%s/;
                            my $var = $&;
                            $var =~ s/(?<!\\)(?:\\\\)*\$(\w+)/$1/g;
                            $var =~ s/^ARGV/sys.argv/;
                            push(@list, $var);
                        }
                        elsif ($match =~ /%[csduoxefgXEGi]/){
                            push(@list, shift(@args));
                        }
                    }

                    # remove final newline
                    my $list = join(', ', @list);
                    if ($string =~ s/^.*\K(?:,\s*"\\n"$)|(?:(?<!\\)\\n(?=\s*"$))//){ #"
                        return "print($string % ($list))";
                    }
                    else{
                        return "print($string % ($list), end='')";
                    }
                }
                elsif ($_[1] eq "print"){

                    my $new_line = 0;
                    if ($_[2] =~ s/^.*\K(?:,\s*"\\n"$)|(?:(?<!\\)\\n(?=\s*"$))//){
                        $new_line = 1; #"
                    }
                    my @printf; 
                    #foreach my $string ( split(/"(?:\\"|""|\\\\|[^"])*"\K,\s*/, $_[2])){
                    foreach my $string ( split(', ', $_[2])){
                        $string =~ s/(\$\w+){(.*?);?}/$1\[$2\]/g;
                        my $re = qr/(?<!\\)(?:\\\\)*\K\$\w+(\[(?<!\\)(?:\\\\)*\$\w+\])?/;
                        if ($string =~ /${re}/){
                            my @list;
                            my @matches = $string =~ /${re}/g;
                            foreach my $match (@matches){
                                $string =~ s/${re}/%s/;
                                my $var = $&;
                                $var =~ s/(?<!\\)(?:\\\\)*\$(\w+)/$1/g;
                                $var =~ s/^ARGV/sys.argv/;
                                push(@list, $var);
                            }
                            push(@printf, "$string % (".join(', ', @list).")" );
                        }
                        else{
                            push(@printf, $string);
                        }
                    }

                    my $final = join(', ', @printf);
                    # remove final newline
                    if ($new_line){
                        return "print($final)";
                    }
                    else{
                        return "print($final, end='')";
                    }
                }
                elsif ($_[1] eq "split") {
                    return "split($_[2])";
                }
                elsif ($_[1] eq "join") {
                    printer (\@_, "term", "LSTOP", "listexpr");
                    my @list = split(', ', $_[2]);
                    my $delim = shift @list;
                    return "'$delim'.join(@list)";
                }
                elsif ($_[1] eq "push") {
                    my @list = split(', ', $_[2]);
                    my $array = shift @list;
                    return "$array.append(@list)";
                }
                elsif ($_[1] eq "unshift") {
                    my @list = split(', ', $_[2]);
                    my $array = shift @list;
                    return "$array.insert(0, @list)";
                }
                elsif ($_[1] eq "reverse") {
                    return "reversed($_[2])";
                }
                elsif ($_[1] eq "open") {
                    my @list = split(', ', $_[2]);
                    my $handle = shift @list;
                    my $file = shift @list;
                    $file =~ s/^"(<|>>|>)//; #"
                    my $mode;
                    if ($1 eq '<'){
                        $mode = 'r';
                    }
                    elsif ($1 eq '>>'){
                        $mode = 'r';
                    }
                    elsif ($1 eq '>'){
                        $mode = 'r';
                    }
                    return "$handle = open(\"$file, \'$mode\')";
                }
                elsif ($_[1] eq "sort") {
                    my @list = split(', ', $_[2]);
                    #TODO
                    my $handle = shift @list;
                    my $mode = shift @list;
                    #return "$handle = open($array.insert(0, @list)";
                }
            }
    |    FUNC '(' listexprcom ')'             /* print (@args) */
            {
                    printer (\@_, "term", "FUNC", "listexprcom");
                if ($_[1] eq "printf"){
                    my @list;
                    my ($string, @args) =
                    split(/"(?:\\"|""|\\\\|[^"])*"\K,\s*/, $_[3]);

                    my $re = qr/(?<!\\)(?:\\\\)*\K\$\w+(\[(?<!\\)(?:\\\\)*\$\w+\])?/;
                    my @matches = $string =~ /${re}|%[csduoxefgXEGi]/g;
                    $string =~ s/(\$\w+){(.*?);?}/$1\[$2\]/g;
                    foreach my $match (@matches){
                        if ($match =~ /\$\w+/){
                            $string =~ s/${re}/%s/;
                            my $var = $&;
                            $var =~ s/(?<!\\)(?:\\\\)*\$(\w+)/$1/g;
                            $var =~ s/^ARGV/sys.argv/;
                            push(@list, $var);
                        }
                        elsif ($match =~ /%[csduoxefgXEGi]/){
                            push(@list, shift(@args));
                        }
                    }

                    my $list = join(', ', @list);
                    if ($string =~ s/^.*\K(?:,\s*"\\n"$)|(?:(?<!\\)\\n(?=\s*"$))//){ #"
                        return "print($string % ($list))";
                    }
                    else{
                        return "print($string % ($list), end='')";
                    }
                }
                elsif ($_[1] eq "print"){

                    my $new_line = 0;
                    if ($_[3] =~ s/^.*\K(?:,\s*"\\n"$)|(?:(?<!\\)\\n(?=\s*"$))//){
                        $new_line = 1; #"
                    }

                    my @printf; 
                    foreach my $string ( split(/"(?:\\"|""|\\\\|[^"])*"\K,\s*/, $_[3])){
                        $string =~ s/(\$\w+){(.*?);?}/$1\[$2\]/g;
                        my $re = qr/(?<!\\)(?:\\\\)*\K\$\w+(\[(?<!\\)(?:\\\\)*\$\w+\])?/;
                        if ($string =~ /${re}/){
                            my @list;
                            my @matches = $string =~ /${re}/g;
                            foreach my $match (@matches){
                                $string =~ s/${re}/%s/;
                                my $var = $&;
                                $var =~ s/(?<!\\)(?:\\\\)*\$(\w+)/$1/g;
                                $var =~ s/^ARGV/sys.argv/;
                                push(@list, $var);
                            }
                            push(@printf, "$string % (".join(', ', @list).")" );
                        }
                        else{
                            push(@printf, $string);
                        }
                    }

                    my $final = join(', ', @printf);
                    # remove final newline
                    if ($new_line){
                        return "print($final)";
                    }
                    else{
                        return "print($final, end='')";
                    }
                }
                elsif ($_[1] eq "join") {
                    my @list = split(', ', $_[3]);
                    my $delim = shift @list;
                    return "'$delim'.join(@list)";
                }
            }
    ;

/* "my" declarations, with optional attributes */
myattrterm:    
        MY myterm
            {
                return $_[2];
            }
    ;

/* Things that can be "my"'d */
myterm    :    '(' expr ')'
                {
                    return $_[2];
                }
    |    '(' ')'
    |    scalar    %prec '('
    |    hsh     %prec '('
    |    ary     %prec '('
    ;

/* Basic list expressions */
/* list of terms separated by comma's*/
listexpr:    /* NULL */ %prec PREC_LOW
            {print "empty listexpr\n";}
    |    argexpr    %prec PREC_LOW
            {
                printer (\@_, "listexpr", "argexpr");
                return $_[1];
            }
    ;

/*list of expressions separated by commas*/
listexprcom:    /* NULL */
    |    expr
            {
                printer (\@_, "listexprcom", "expr");
                return "$_[1]";
            }
    |    expr ','
            {
                printer (\@_, "listexprcom", "expr", "','");
                return "$_[1], ";
            }
    ;

/* A little bit of trickery to make "for my $foo (@bar)" actually be
   lexical */

my_scalar:    scalar
    ;

amper    :    '&' indirob
    ;

scalar    :    '$' indirob
            {
                printer (\@_, "scalar", "'\$'", "indirob"); 
                return "$_[2]";
            }
    ;

ary    :    '@' indirob
            {
                printer (\@_, "scalar", "'\@'", "indirob"); 
                return $_[2];
            }
    ;

hsh :    '%' indirob {
            return $_[2];
            } 
    ;

arylen    :    DOLSHARP indirob {return "len($_[2]) - 1";}
    ;

/* Indirect objects */
indirob    :    WORD
            {
                printer (\@_, "indirob", "WORD");
                return $_[1];
            }
    |    ARGV
            {
                $_[0]->YYData->{"IMPORTS"}{"import sys"} = 1; 
                $_[0]->YYData->{"PRELUDE"}{"sys.argv = sys.argv[1:]"} = 1; 
                return "sys.argv";
            }
    |    scalar %prec PREC_LOW
    |    block
            {printer (\@_, qw(indirob indexblock));}
    ;

%%
