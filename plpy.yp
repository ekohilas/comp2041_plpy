# A modified version of perly.y taken from perl's source
#   list of all required functions
#   print, printf, chomp, split, join, exit, push, pop, shift, scalar
#   unshift, reverse, open, close, sort BLOCK LIST, keys, return,
#   ^(\/[^/]*\/)|(s\/[^/]*\/[^/]*\/)
#   s\/((?:[^\/\\]|\\\/|\\\\)*)\/((?:[^\/\\]|\\\/|\\\\)*)\/([msixpodualngcer]?)

%{
use Term::ANSIColor;
use feature "switch";

sub Lexer {
    my ($type, $value) = getToken($_[0]);

    if ($_[0]->YYData->{"DEBUG"}){
        print STDERR color('red');
        print STDERR "Removed: (", color('reset'), "'$type': '$value'",
        color('red'), ")\n";
        print STDERR color('reset');
    }

    return ($type, $value);
}

sub getToken {
    my $uni = "chomp|exit|pop|shift|scalar|close|keys";
    my $lop = "printf|print|join|split|push|unshift|reverse|open|sort";
    my @tokens = (
        # matches a string with double or escaped quotes 
        #["STRING", qr/"(?:\\"|""|\\\\|[^"])*"/],
        ["STRING", qr/^"(?:[^"\\]|\\.|"")*"/],
        # matches until first ', avoiding \'
        ["STRING", qr/'.*?(?<!\\)'/],
        # matches matching functions split (/foo/, $bar)
        ["PMFUNC", qr/split(?=\s*\(\s*\/)/],
        ["RESUB", qr/s\/(?:(?<!\\)(?:\\\\)*.*\/){2}[msixpodualngcer]?/],
        ["REMATCH", qr/m?\/(?<!\\)(?:\\\\)*.*\/[imnsxadlup]?/],
        #matches all functions with brackets
        ["FUNC1", qr/(?:${uni})(?=\s*\()/],
        ["UNIOP", qr/(?:${uni})(?!\s*\()/],
        ["FUNC", qr/(?:${lop})(?=\s*\()/],
        ["LSTOP", qr/(?:${lop})(?!\s*\()/],
        ["FHANDLE", qr/<.*?>/],
        ["ARGV", qr/ARGV/],
        ["COMMENT", qr/\#.*/],
        ["FOR", qr/foreach|for/],
        ["WHILE", qr/while/],
        ["ELSIF", qr/elsif/],
        ["ELSE", qr/else/],
        ["LOOPEX", qr/(last|next)(?=\s*;)/],
        ["ANDOP", qr/and/],
        ["NOTOP", qr/not/],
        ["SUB", qr/sub/],
        ["IF", qr/if/],
        ["MY", qr/my/],
        ["OROP", qr/or/],
        ["DOTDOT", qr/\.\./],
        ["EQOP", qr/==|!=|eq|<=>/],
        ["ANDAND", qr/&&/],
        ["MATCHOP", qr/=~/],
        ["POWOP", qr/\*\*/],
        ["POSTINC", qr/\+\+/],
        ["POSTDEC", qr/--/],
        ["DOLSHARP", qr/\$#/],
        ["ASSIGNOP", qr/=|\.=/],
        ["ADDOP", qr/[\+\.-]/],
        ["BITANDOP", qr/&/],
        ["BITOROP", qr/\|/],
        ["BITXOROP", qr/\^/],
        ["SHIFTOP", qr/>>|<</],
        ["RELOP", qr/<=|>=|lt|gt|le|ge/],
        ["RELOP", qr/>|</],
        ["MULOP", qr/[\/%\*]/],
        ["OROR", qr/\|\|/],
        ["~", qr/~/],
        [",", qr/,/],
        ["!", qr/!/],
        [")", qr/\)/],
        ["(", qr/\(/],
        ["{", qr/\{/],
        ["}", qr/\}/],
        [";", qr/;/],
        ["[", qr/\[/],
        ["]", qr/\]/],
        ["@", qr/@/],
        ["%", qr/%/],
        ["\$", qr/\$/],
        ["WORD", qr/\w+/a], #look at later
    );

    $_[0]->YYData->{"DATA"} =~ s/^\s+//;
    #adds a final ; in blocks if one doens't exist for syntax reasons
    $_[0]->YYData->{"DATA"} =~ s/(?!})^.*?\K;?\s*}/;}/;

    if ($_[0]->YYData->{"DEBUG"}){
        print STDERR color('blue');
        print STDERR "___Remaining___\n", $_[0]->YYData->{"DATA"};
        print STDERR color('reset');
    }

    my @length;
    my $found = 0;
    for (my $i; $i < scalar @tokens; $i++){
        my $token = $tokens[$i][0];
        my $re = $tokens[$i][1];
        $length[$i] = 0;
        if ($_[0]->YYData->{"DATA"} =~ /^${re}/){
            $found = 1;
            @length[$i] = length($&);
            #print "Found match ($token): ($&), $length[$i]\n";
        }
        #print "$token, $re\n";
    }

    if (!$found && length ($_[0]->YYData->{"DATA"})) {
        print STDERR "Unable to find token\n";
        print STDERR $_[0]->YYData->{"DATA"}, "\n";
        return ('', undef);
    }

    if (length ($_[0]->YYData->{"DATA"})) {
        my ($maxpos, $maxval) = 0; 
        for (my $i = 0; $i < scalar @tokens; $i++){
            if ($length[$i] > $maxval){
                $maxpos = $i;
                $maxval = $length[$i];
            }
        }
        #print "$tokens[$maxpos][0]\n";
        my $token = $tokens[$maxpos][0];
        my $re = $tokens[$maxpos][1];
        $_[0]->YYData->{"DATA"} =~ s/^${re}//;
        #print "$token : $&\n";
        return ($token, $&);
    }
    else {
        return ('', undef);
    }
}

sub printer {
    my @tokens = @{shift(@_)};
    my @words = @_;
    my $parser = shift(@tokens);
    my $first_word = shift(@words);
    my $word_string = $first_word." => ";
    $word_string .= join(" -> ", @words);
    my $token_string = "$first_word"." => ";
    $token_string .= join(" -> ", @tokens);
    
    if ($parser->YYData->{"DEBUG"}){
        print STDERR color('green');
        print STDERR "$word_string\n";
        print STDERR "$token_string\n";
        print STDERR "\n";
        #print STDERR "('", $parser->YYCurtok, "': '", $parser->YYCurval, "')\n";
        #print STDERR "YYExpect:\n", join("\n", $parser->YYExpect), "\n";
        print STDERR color('reset');
    }
}

sub func_printf {
    my @list;
    my ($string, @args) = split(/"(?:\\"|""|\\\\|[^"])*"\K,\s*/, $_[2]);

    my $re = qr/(?<!\\)(?:\\\\)*\K\$\w+(?:\[(?<!\\)(?:\\\\)*\$\w+\])?/;

    $string =~ s/(\$\w+){(.*?);?}/$1\[$2\]/g;
    my @matches = $string =~ /${re}|%[csduoxefgXEGi]/g;
    foreach my $match (@matches){
        if ($match =~ /\$\w+/){
            $string =~ s/${re}/%s/;
            my $var = $&;
            $var =~ s/(?<!\\)(?:\\\\)*\$(\w+)/$1/g;
            $var =~ s/^ARGV/sys.argv/;
            push(@list, $var);
        }
        elsif ($match =~ /%[csduoxefgXEGi]/){
            push(@list, shift(@args));
        }
    }

    # remove final newline
    my $list = join(', ', @list);
    if ($string =~ s/^.*\K(?:,\s*"\\n"$)|(?:(?<!\\)\\n(?=\s*"$))//) { #"
        return "print($string % ($list))";
    }
    else {
        return "print($string % ($list), end='')";
    }
}

sub func_print {

    my $new_line = 0;
    if ($_[2] =~ s/^.*\K(?:,\s*"\\n"$)|(?:(?<!\\)\\n(?=\s*"$))//){
        $new_line = 1; #"
    }

    my @printf; 
    foreach my $string ( split(/"(?:\\"|""|\\\\|[^"])*"\K,\s*/, $_[2])){
        $string =~ s/(\$\w+){(.*?);?}/$1\[$2\]/g;
        my $re = qr/(?<!\\)(?:\\\\)*\K\$\w+(\[(?<!\\)(?:\\\\)*\$\w+\])?/;
        if ($string =~ /${re}/){
            my @list;
            my @matches = $string =~ /${re}/g;
            foreach my $match (@matches){
                $string =~ s/${re}/%s/;
                my $var = $&;
                $var =~ s/(?<!\\)(?:\\\\)*\$(\w+)/$1/g;
                $var =~ s/^ARGV/sys.argv/;
                push(@list, $var);
            }
            push(@printf, "$string % (".join(', ', @list).")" );
        }
        else {
            push(@printf, $string);
        }
    }

    my $final = join(', ', @printf);
    # remove final newline
    if ($new_line) {
        return "print($final)";
    }
    else {
        return "print($final, end='')";
    }
}

sub func_join {
    my @list = split(', ', $_[2]);
    my $delim = shift @list;
    return "'$delim'.join(@list)";
}

sub func_push {
    my @list = split(', ', $_[2]);
    my $array = shift @list;
    return "$array.append(@list)";
}

sub func_unshift {
    my @list = split(', ', $_[2]);
    my $array = shift @list;
    return "$array.insert(0, @list)";
}

sub func_open {
    my @list = split(', ', $_[2]);
    my $handle = shift @list;
    my $file = shift @list;
    $file =~ s/^"(<|>>|>)/"/; #"

    my $mode;
    given ($1) {
        when ('<')  { $mode = "'r'" }
        when ('>>') { $mode = "'a'" }
        when ('>')  { $mode = "'w'" }
    }
    return "$handle = open($file, $mode)";
}

sub compile_flags {
    my @flags;
    if ($_[0] =~ /i/)   {push (@flags, "re.I")}
    if ($_[0] =~ /m/)   {push (@flags, "re.M")}
    if ($_[0] =~ /s/)   {push (@flags, "re.S")}
    return join('| ', @flags);
}
%}

%token '{'

%token WORD PMFUNC STRING 
%token SUB 
%token WHILE IF ELSE ELSIF FOR /*UNTIL UNLESS*/
%token LOOPEX DOTDOT
%token FUNC1 FUNC UNIOP LSTOP /*FUNC0*/
%token RELOP EQOP MULOP ADDOP BITANDOP BITOROP SHIFTOP BITXOROP
%token DOLSHARP NOAMP
%token MY 
%token REMATCH RESUB 
%token FHANDLE ARGV 

%nonassoc PREC_LOW
%nonassoc LOOPEX

%left OROP
%left ANDOP
%right NOTOP
%nonassoc LSTOP 
%left ','
%right ASSIGNOP
/*%right '?' ':'*/
%nonassoc DOTDOT
%left OROR
%left ANDAND
%left BITOROP BITXOROP
%left BITANDOP
%nonassoc EQOP
%nonassoc RELOP
%nonassoc UNIOP 
%left SHIFTOP 
%left ADDOP
%left MULOP
%left MATCHOP
%right '!' '~' UMINUS 
%right POWOP
%nonassoc POSTINC POSTDEC
%nonassoc ')'
%left '('
%left '[' '{'


%% /* RULES */

/* The whole program */
prog        :   lineseq
            ;

/* A collection of "lines" in the program */
lineseq     :   /* NULL */
            |   lineseq subrout
                {
                    printer(\@_, qw( lineseq lineseq decl )); 
                    return "$_[1]$_[2]\n";
                }
            |   lineseq line
                {
                    printer(\@_, "lineseq", "lineseq", "line");
                    return "$_[1]$_[2]\n";
                }
            ;

/* A "line" in the program */
line        :   cond
            |   loop    /* loops add their own labels */
            |   sideff ';'
            |   COMMENT 
                {
                    printer(\@_, "line", "COMMENT");
                    return "$_[1]\n";
                }
            ;

/* An ordinary block */
block       :   '{' lineseq '}'
                {
                    printer(\@_, qw( block '{' lineseq '}' )); 
                    # adds indentation
                    $_[2] =~ s/^/    /gm;   #"/
                    return "\n$_[2]\n";
                }
            ;

/* An expression which may have a side-effect */
sideff      :   expr
                {
                    printer(\@_, "sideff", "expr");
                    return $_[1];
                }
            |   expr WHILE expr
                {
                    printer(\@_, qw( sideff expr WHILE expr ));
                    return "while $_[3]: $_[1]";
                }
            |   expr FOR expr
                {
                    printer (\@_, qw(sideff expr FOR expr));
                    return "for $_[3]: $_[1]";
                }
            ;

/* else and elsif blocks */
else        :   /* NULL */
            |   ELSE block
                {
                    printer (\@_, qw( else ELSE block ));
                    return "else:$_[2]";
                }
            |   ELSIF '(' expr ')' block else
                {
                    printer (\@_, qw( else ELSIF '(' expr ')' block else)); 
                    return "elif $_[3]:$_[5]$_[6]";
                }
            ;

/* Real conditional expressions */
cond        :   IF '(' expr ')' block else
                {
                    printer (\@_, qw( IF '(' expr ')' block else));
                    return "if $_[3]:$_[5]$_[6]";
                    
                }
            ;

/* Loops: while, until, for, and a bare block */
loop        :   WHILE '(' texpr ')' block 
                {
                     printer (\@_, qw(WHILE '(' texpr ')' block cont)); 
                     if ($_[3] =~ /(\w+)\s*=\s*(.*)\s*/) {
                        return "for $1 in $2:$_[5]";
                     }
                     else {
                        return "while $_[3]:$_[5]";
                     }
                }
            |   FOR MY scalar '(' expr ')' block 
                {
                    printer (\@_, qw(loop FOR MY scalar '(' expr ')' block cont)); 
                    return "for $_[3] in $_[5]:$_[7]";
                }
            |   FOR scalar '(' expr ')' block 
                {
                    printer (\@_, qw(loop FOR scalar '(' expr ')' block cont)); 
                    return "for $_[2] in $_[4]:$_[6]";
                }
            |   FOR '(' expr ')' block 
                {
                    return "for _ in $_[3]:$_[5]";
                }
            |   FOR '(' nexpr ';' texpr ';' nexpr ')' block
                {
                    printer (\@_, qw(loop FOR '(' nexpr ';' texpr ';' nexpr ')' block)); 
                    return "$_[3]\nwhile $_[5]:$_[9]$_[7]\n";
                }
            ;

/* Normal expression */
nexpr       :   /* NULL */
            |   sideff
            ;

/* Boolean expression */
texpr       :   /* NULL means true */ {"True"}
            |   expr
            ;

/* Subroutine definition */
subrout     :   SUB subname subbody {"def $_[2]():$_[3]"}
            ;

/* Name of a subroutine - must be a bareword, could be special */
subname     :   WORD
            ;

/* Subroutine body - either null or a block */
subbody     :   block
            |   ';'
            ;

/* Ordinary expressions; logical combinations */
expr        :   expr ANDOP expr
                {
                    printer (\@_, qw(expr expr ANDOP expr)); 
                    return "$_[1] and $_[3]";
                }
            |   expr OROP expr
                {
                    printer (\@_, qw(expr expr OROP expr)); 
                    return "$_[1] or $_[3]";
                }
            |   argexpr %prec PREC_LOW
                {
                    printer(\@_, qw(expr argexpr));
                    return $_[1];
                }
            ;

/* Expressions are a list of terms joined by commas */
argexpr     :   argexpr ','
                {
                    printer (\@_, "argexpr", "','");
                    return "$_[1], ";
                }
            |   argexpr ',' term
                {
                    printer (\@_, "argexpr", "','", "term");
                    return "$_[1], $_[3]";
                }
            |   term %prec PREC_LOW
                {
                    printer (\@_, "argexpr", "term");
                    return $_[1];
                }
            ;

/* Some kind of subscripted expression */
subscripted :   scalar '[' expr ']'             {"$_[1]$_[2]$_[3]$_[4]"} /* $array[$element] */
            |   subscripted '[' expr ']'        {"$_[1]$_[2]$_[3]$_[4]"} /* $array[$element] */
            |   scalar '{' expr ';' '}'
                {
                    $_[0]->YYData->{"PRELUDE"}{"$_[1] = {}"} = 1; 
                    return "$_[1]\[$_[3]\]"; 
                }
            |   subscripted '{' expr ';' '}'    {"$_[1]\[$_[3]\]"}
            ;

/* binary operators between terms */
termbinop   :   term ASSIGNOP term             /* $x =, .= $y */
                {
                    printer (\@_, "termbinop", "term", "ASSIGNOP", "term");
                    if ($_[2] eq '.=') {$_[2] = '+='}
                    return "$_[1] $_[2] $_[3]";
                }
            |   term POWOP term                        /* $x ** $y */
                {
                    printer (\@_, "termbinop", "term", "POWOP", "term");
                    return "eval(str($_[1])) $_[2] eval(str($_[3]))";
                }
            |   term MULOP term                        /* $x * $y*/
                {
                    printer (\@_, "termbinop", "term", "MULOP", "term");
                    return "eval(str($_[1])) $_[2] eval(str($_[3]))";
                }
            |   term ADDOP term                        /* $x [+-.] $y */
                {
                    printer (\@_, "termbinop", "term", "ADDOP", "term");
                    if ($_[2] eq '.'){
                        return "str($_[1]) + str($_[3])";
                    }
                    else {
                        return "eval(str($_[1])) $_[2] eval(str($_[3]))";
                    }
                }
            |   term SHIFTOP term                      /* $x >> $y, $x << $y */
                {
                    printer (\@_, qw(term SHIFTOP term)); 
                    return "$_[1] $_[2] $_[3]";
                }
            |   term RELOP term                        /* $x > $y, etc. */
                {
                    printer (\@_, qw(termbinop term EQOP term)); 
                    my %relop = (
                        "gt" => ">",
                        "ge" => ">=",
                        "le" => "<=",
                        "lt" => "<"
                    );
                    $_[2] = exists $relop{$_[2]} ? $relop{$_[2]} : $_[2];
                    return "$_[1] $_[2] $_[3]";
                }
            |   term EQOP term                         /* $x == $y, $x eq $y */
                {
                    printer (\@_, qw(termbinop term EQOP term)); 
                    if ($_[2] eq 'eq') {$_[2] = '=='}
                    if ($_[2] eq '<=>') {
                        return "((a > b) - (a < b))";
                    }
                    return "$_[1] $_[2] $_[3]";
                }
            |   term BITANDOP term                     /* $x & $y */
                {
                    printer (\@_, qw(termbinop term BITANDOP term)); 
                    return "$_[1] & $_[2]";
                }
            |   term BITOROP term                      /* $x | $y */
                {
                    printer (\@_, qw(termbinop term BITOROP term)); 
                    return "$_[1] | $_[2]";
                }
            |   term BITXOROP term                      /* $x | $y */
                {
                    printer (\@_, qw(termbinop term BITXOROP term)); 
                    return "$_[1] ^ $_[2]";
                }
            |   term DOTDOT term                       /* $x..$y, $x...$y */
                {
                    return "list(range($_[1], $_[3] + 1))";
                }
            |   term ANDAND term                       /* $x && $y */
                {
                    printer (\@_, qw(termbinop term andand term)); 
                    return "$_[1] and $_[3]";
                }
            |   term OROR term                         /* $x || $y */
                {
                    printer (\@_, qw(termbinop term OROR term)); 
                    return "$_[1] or $_[3]";
                }
            |   term MATCHOP term         /*or term?           /* $x =~ s/$y/ */
                {
                    $_[0]->yydata->{"IMPORTS"}{"import re"} = 1; 

                    # TODO g flag
                    if ($_[3] =~ /^s/) {
                        $_[3] =~ /s\/((?<!\\)(?:\\\\)*.*)\/((?<!\\)(?:\\\\)*.*?)\/([msixpodualngcer]*)/;
                        my $re = $1;
                        my $repl = $2;
                        my $flags = compile_flags ($3);

                        $repl =~ s/(?<!\\)(?:\\\\)*\K\\(\d)/\\$1/;
                        my $sub_string;
                        if ($flags) {
                            $sub_string = "r'$re', '$repl', $_[1], $flags";
                        }
                        else {
                            $sub_string = "r'$re', '$repl', $_[1]";
                        }
                        return "$_[1] = re.sub($sub_string)";

                    }
                    else {
                        $_[3] =~ /\/((?<!\\)(?:\\\\)*.*)\/([imnsxadlup]*)/;
                        my $re = $1;
                        my $flags = compile_flags ($2);

                        my $search_string;
                        if ($flags) {
                            $search_string = "r'$re', $_[1], $flags";
                        }
                        else {
                            $search_string = "r'$re', $_[1]";
                        }
                        return "__MATCH__ = re.search($search_string)";
                        
                    }
                }
            ;

/* Unary operators and terms */
termunop    :   '-' term %prec UMINUS   {"-$_[2]"}      /* -$x */
            |   '+' term %prec UMINUS   {$_[2]}         /* +$x */
            |   '!' term                {"not $_[2]"}   /* !$x */
            |   '~' term                {"~$_[2]"}      /* ~$x */
            |   term POSTINC            {"$_[1] += 1"}  /* $x++ */
            |   term POSTDEC            {"$_[1] -= 1"}  /* $x-- */
            ;

term        :   termbinop
            |   termunop
            |   FHANDLE
                {
                    given ($_[1]) {
                        when ("<STDIN>") {
                                $_[0]->YYData->{"IMPORTS"}{"import sys"} = 1; 
                                return "sys.stdin.readline()";
                        }
                        when ("<\@STDIN>") {
                                $_[0]->YYData->{"IMPORTS"}{"import sys"} = 1; 
                                return "sys.stdin.readlines()";
                        }
                        when ("<>") {
                                $_[0]->YYData->{"IMPORTS"}{"import fileinput"} = 1; 
                                return "fileinput.input()";
                        }
                        default {
                                $_[1] =~ s/<(.*?)>/$1/;
                                return $_[1];
                        }
                    }
                    
                }
            |   REMATCH
            |   RESUB
            |   ARGV 
                {
                    $_[0]->YYData->{"IMPORTS"}{"import sys"} = 1; 
                    $_[0]->YYData->{"PRELUDE"}{"sys.argv = sys.argv[1:]"} = 1; 
                    return "sys.argv";
                }
            |   STRING 
                {
                    printer (\@_, "term", "STRING");
                    $_[1] =~ s/^"\$(\w+)"/$1/;
                    return $_[1];
                }
            |   myattrterm %prec UNIOP
            |   '(' expr ')'    {$_[2]}
            |   '(' ')'         {"$_[1]$_[2]"}
            |   scalar %prec '('
            |   hsh %prec '('
            |   ary %prec '('
            |   arylen %prec '('                    /* $#x, $#{ something } */
            |   subscripted
            |   ary '[' expr ']'                     /* array slice */
                {
                    return "$_[1]$_[2]$_[3]$_[4]"; 
                }
            |   amper                                /* &foo; */
            |   amper '(' ')'                        /* &foo() */
            |   amper '(' expr ')'                   /* &foo(@args) */
            |   NOAMP WORD listexpr                  /* foo(@args) */
                {
                    printer (\@_, qw(term NOAMP WORD listexpr)); 
                }
            |   LOOPEX  /* loop exiting command (goto, last, dump, etc) */
                {
                    given ($_[1]) {
                        when ("last")   {"break"}
                        when ("next")   {"continue"}
                    }
                }
            |   NOTOP argexpr        {"not $_[2]"}   /* not $foo */
            |   WORD
            |   function
            ;

function    :   UNIOP                                /* Unary op, $_ implied */
                {
                    printer (\@_, qw(term UNIOP)); 
                    if ($_[1] eq "exit"){
                       return "exit()";
                    }
                }
            |   UNIOP block                          /* eval { foo }, I *think* */
            |   UNIOP term                           /* Unary op */
                {
                    printer (\@_, qw(term UNIOP term)); 
                    given ($_[1]) {
                        when ("chomp")  { "$_[2] = $_[2].strip()" }
                        when ("pop")    { "$_[2].pop()" }
                        when ("shift")  { "$_[2].pop(0)" }
                        when ("close")  { "$_[2].close()" }
                        when ("keys")   { "$_[2].keys()" }
                    }
                }
            |   FUNC1 '(' ')'                        /* not () */
                {
                    if ($_[1] eq "exit"){
                       return "exit()";
                    }
                }
            |   FUNC1 '(' expr ')'                   /* not($foo) */
                {
                    given ($_[1]) {
                        when ("exit")   { "exit($_[3])" }
                        when ("chomp")  { "$_[3] = $_[3].strip()" }
                        when ("pop")    { "$_[3].pop()" }
                        when ("shift")  { "$_[3].pop(0)" }
                        when ("close")  { "$_[3].close()" }
                        when ("keys")   { "$_[3].keys()" }
                    }
                }
            |   PMFUNC '(' term ')'                  /* split (/foo/) */
            |   PMFUNC '(' term ',' term ')'         /* split (/foo/,$bar) */
                {
                    $_[3] =~ s/\/(.*)\//$1/;
                    $_[3] =~ s/([\Q{}[]()^$.|*+?\\E\w\s]*)/$1/g;
                    return "split($_[3], $_[5])";
                }
            |   LSTOP indirob argexpr /* sort func @args */
            |   FUNC '(' indirob expr ')'      /* sort (func @args */
            |   LSTOP listexpr                       /* print @args */
                {
                    printer (\@_, "term", "LSTOP", "listexpr");

                    given ($_[1]) {
                        when ("print")  { &func_print }
                        when ("printf") { &func_printf }
                        when ("split")  { "split($_[2])" }
                        when ("join")   { &func_join }
                        when ("push")   { &func_push }
                        when ("unshift"){ &func_unshift }
                        when ("reverse"){ "reversed($_[2])" }
                        when ("open")   { &func_open }
                        when ("sort")   { "sorted($_[2])" }
                    }
                }
            |   FUNC '(' listexprcom ')'             /* print (@args) */
                {
                    $_[2] = $_[3];
                    given ($_[1]) {
                        when ("print")  { &func_print }
                        when ("printf") { &func_printf }
                        when ("split")  { "split($_[2])" }
                        when ("join")   { &func_join }
                        when ("push")   { &func_push }
                        when ("unshift"){ &func_unshift }
                        when ("reverse"){ "reversed($_[2])" }
                        when ("open")   { &func_open }
                        when ("sort")   { "sorted($_[2])" }
                    }
                }
            ;

/* "my" declarations, with optional attributes */
myattrterm  :   MY myterm {$_[2]}
            ;

/* Things that can be "my"'d */
myterm      :   '(' expr ')' {$_[2]}
            |   '(' ')'
            |   scalar    %prec '('
            |   hsh     %prec '('
            |   ary     %prec '('
            ;

/* Basic list expressions */
/* list of terms separated by comma's*/
listexpr    :   /* NULL */ %prec PREC_LOW
            |   argexpr    %prec PREC_LOW
            ;

/*list of expressions separated by commas*/
listexprcom:    /* NULL */
            |   expr
            |   expr ','    {"$_[1], "}
            ;

/* A little bit of trickery to make "for my $foo (@bar)" actually be lexical */

amper       :   '&' indirob {$_[2]}
            ;

scalar      :   '$' indirob {$_[2]}
            ;

ary         :   '@' indirob {$_[2]}
            ;

hsh         :   '%' indirob {$_[2]}
            ;

arylen      :   DOLSHARP indirob {"len($_[2]) - 1"}
            ;

/* Indirect objects */
indirob     :   WORD
            |   ARGV
                {
                    $_[0]->YYData->{"IMPORTS"}{"import sys"} = 1; 
                    $_[0]->YYData->{"PRELUDE"}{"sys.argv = sys.argv[1:]"} = 1; 
                    return "sys.argv";
                }
            |   scalar %prec PREC_LOW
            |   block
            ;

%%
